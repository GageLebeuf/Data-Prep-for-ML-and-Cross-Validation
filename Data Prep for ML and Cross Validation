{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Pyolite",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "# Introduction to preparing data for ML models and the importance of Cross Validation\n\nFor this guide we assume that your data has already been properly cleaned and stored in a pandas dataframe.\n<br>\n\n## Training/Validation/Test Sets\n\nTo build a reliable machine learning model its important to never use the same data for evaluating your model that you used to train it.  Doing so will result in a biased measurement of accuracy and can lead to false confidence in your models ability to generalize to unseen data.\n\n$\\it{Generalization}$:  Your model's ability to adapt properly to new, previously unseen data, drawn from the same distribution as the one used to create the model.  \n\nTo understand how we can better assess the accuracy of our model we will need to build an understanding of ways to slice our dataset up into mutually exclusive sections that can be used at certain points in our model building process.  By compartmentalizing our data into training, validation, and testing sets, we avoid tuning/evaluating our models accuracy with observations that were used to train it, which would obviously bias the results. \n\n### Training Set\n\nOur training set is a section of our data that is used to train the model.  The training process picks up on all the hidden features and patterns within the data.  The model that is created is ultimately used to analyze future observations using these features and patterns.\n\n### Validation Set\n\nOur validation set is a seperate section of data that is used to validate our models performance during training.  The information we get from analyzing the validation set with the model built on the training set allows us to tweak features of our model. We use a new section of data that wasn't used to train the model to avoid overfitting our model to the unique features in our training set.  We'll discuss this in more depth when we actually build a model below.\n\n$\\it{Overfitting}$: The productiong of an analysis that corresponds too closely or exactly to a particular set of data, and may therefor fail to fit to additional data or predict future observations reliably\n\n### Test Set\n\nOur test set yet another seperate section of our data set that is used to get an unbiased measurement of our models accuracy.  \n\n### How to decide optimal way to split data\n\nWhile it would be convenient if there was an optimal split that we could use for all our models and tasks, the reality is that there is no such thing.  The decision of what percentage of your data to allot to each set is an artform in itself.  The decision is largely influence on the type of model your training, the size of your dataset, and the number of features for each observation within the dataset. However, a decent starting point to feel out the optimal split could look something like this: (80% Training / 10% Validation / 10% Test)\n\n## The smoothing effect of Cross-Validation\n\nA thought you might have had up to this point is \"What if there are important features or patterns in my validation/test set that model wasn't trained on?\".  This is a valid concern considering these two sets can make up a sizeable chunk of your overall data.  Depriving your model from being able to train on these features can lead to under-fitting, where we leave insightful information on the table.  So how do we fix this concern?  The answer is in Cross-Validation.\n\n### K-Fold Cross Validation\n\nK-Fold Cross Validation is a creative way to ensure that all data-points are considered when validating or testing our model.  It accomplishes this by slicing our data into a pre-determined number of segments, and takes turns having each segment be the training/validation set. Lets say we chose k=5.  Our dataset will create 5 models, each model having a unique combination of 4 folds as the training set, and the 5th fold being the training/validation.  This averages the error estimates over all k trials to get a picture of total effectiveness of the model.  This drastically reduces bias and variance.\n\n### Stratified K-Fold Cross Validation\n\nThis is a slightly modified version of K-Fold Validation that helps deal with large imbalances in the response variables.  In this version, each fold contains approximately the same proportion of each target class as the complete set has.  This helps solve the problem of training a model that isn't exposed to a rare class that exists in your test set, which would skew accuracy and performance.\n\nThe first graph (Titled KFold) below demonstrates the logic behind a K-Fold Cross Validation while also demonstrating how various classes or observations can still be left out of the training set.\n\nThe second graph (Titled StratifiedKFold) shows how sampling from each class based off their overall proportion allows the model to get an accurate measure of all observations.\n\n* Graphic below from https://scikit-learn.org/stable/auto_examples/model_selection/plot_cv_indices.html",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.model_selection import (\n    TimeSeriesSplit,\n    KFold,\n    ShuffleSplit,\n    StratifiedKFold,\n    GroupShuffleSplit,\n    GroupKFold,\n    StratifiedShuffleSplit,\n    StratifiedGroupKFold,\n)\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Patch\n%matplotlib inline\n\nnp.random.seed(1338)\ncmap_data = plt.cm.Paired\ncmap_cv = plt.cm.coolwarm\nn_splits = 5\n\n\n# Generate the class/group data\nn_points = 100\nX = np.random.randn(100, 10)\n\npercentiles_classes = [0.1, 0.3, 0.6]\ny = np.hstack([[ii] * int(100 * perc) for ii, perc in enumerate(percentiles_classes)])\n\n# Evenly spaced groups repeated once\ngroups = np.hstack([[ii] * 10 for ii in range(10)])\n\n\n\n\ndef plot_cv_indices(cv, X, y, group, ax, n_splits, lw=10):\n    \"\"\"Create a sample plot for indices of a cross-validation object.\"\"\"\n\n    # Generate the training/testing visualizations for each CV split\n    for ii, (tr, tt) in enumerate(cv.split(X=X, y=y, groups=group)):\n        # Fill in indices with the training/test groups\n        indices = np.array([np.nan] * len(X))\n        indices[tt] = 1\n        indices[tr] = 0\n\n        # Visualize the results\n        ax.scatter(\n            range(len(indices)),\n            [ii + 0.5] * len(indices),\n            c=indices,\n            marker=\"_\",\n            lw=lw,\n            cmap=cmap_cv,\n            vmin=-0.2,\n            vmax=1.2,\n        )\n\n    # Plot the data classes and groups at the end\n    ax.scatter(\n        range(len(X)), [ii + 1.5] * len(X), c=y, marker=\"_\", lw=lw, cmap=cmap_data\n    )\n\n    ax.scatter(\n        range(len(X)), [ii + 2.5] * len(X), c=group, marker=\"_\", lw=lw, cmap=cmap_data\n    )\n\n    # Formatting\n    yticklabels = list(range(n_splits)) + [\"class\", \"group\"]\n    ax.set(\n        yticks=np.arange(n_splits + 2) + 0.5,\n        yticklabels=yticklabels,\n        xlabel=\"Sample index\",\n        ylabel=\"CV iteration\",\n        ylim=[n_splits + 2.2, -0.2],\n        xlim=[0, 100],\n    )\n    ax.set_title(\"{}\".format(type(cv).__name__), fontsize=15)\n    return ax\n\nfig, ax = plt.subplots()\ncv = KFold(n_splits)\nplot_cv_indices(cv, X, y, groups, ax, n_splits)\n\n\n# To better demonstrate the difference, we will assign samples to groups\n# unevenly:\n\nuneven_groups = np.sort(np.random.randint(0, 10, n_points))\n\ncvs = [StratifiedKFold]\n\nfor cv in cvs:\n    fig, ax = plt.subplots(figsize=(8, 5))\n    plot_cv_indices(cv(n_splits), X, y, uneven_groups, ax, n_splits)\n    ax.legend(\n        [Patch(color=cmap_cv(0.8)), Patch(color=cmap_cv(0.02))],\n        [\"Testing set\", \"Training set\"],\n        loc=(1.02, 0.8),\n    )\n    # Make the legend fit\n    plt.tight_layout()\n    fig.subplots_adjust(right=0.7)",
      "metadata": {
        "tags": [],
        "jupyter": {
          "source_hidden": true
        },
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 576x360 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}
